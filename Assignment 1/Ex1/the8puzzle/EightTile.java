/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/BeanForm.java to edit this template
 */
package the8puzzle;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeSupport;
import javax.swing.JButton;
import javax.swing.Timer;

/**
 * A Tile for the EightPuzzle game.
 *
 * @author Antonio
 */
public class EightTile extends JButton implements PropertyChangeListener {

    // Game logic
    private final int position;
    private int tileLabel;

    // Colors
    private final Color holeColor = Color.darkGray;
    private final Color wrongPositionColor = Color.YELLOW;
    private final Color rightPositionColor = Color.GREEN;
    private final Color blinkColor = Color.RED;

    // Blink customization for error displaying
    private final int blinkDuration = 50;
    private final byte blinkColorChangeTimes = 3;

    // Vetos
    private final VetoableChangeSupport vetos;

    // Events
    public static final String EVENT_TILECLICKED = "tileClicked";

    public EightTile() {
        // Public constructor for making EightTile a bean. Should never be used.
        initComponents();
        this.position = -1;
        this.vetos = new VetoableChangeSupport(this);
    }

    public EightTile(int position) {
        initComponents();
        this.position = position;
        this.vetos = new VetoableChangeSupport(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {
        setBackground(new java.awt.Color(255, 255, 51));
        setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setMargin(new java.awt.Insets(0, 0, 0, 0));
        setPreferredSize(new java.awt.Dimension(100, 100));
        addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightTileClicked(evt);
            }
        });
    }

    @Override
    public void addVetoableChangeListener(VetoableChangeListener listener) {
        this.vetos.addVetoableChangeListener(listener);
    }

    @Override
    public void removeVetoableChangeListener(VetoableChangeListener listener) {
        this.vetos.removeVetoableChangeListener(listener);
    }

    /**
     * @return position value.
     */
    public int getPosition() {
        return this.position;
    }

    /**
     * @return tileLabel value.
     */
    public int getTileLabel() {
        return this.tileLabel;
    }

    /**
     * Set the label of the tile.
     * Colour is also changed dependently from label value.
     *
     * @param label Wanted label for the tile. If label=0, the tile is
     *              considered as the hole.
     */
    public void setTileLabel(int label) {
        this.tileLabel = label;

        // Set background color
        Color backgroundColor = label == 0 ? this.holeColor
                : label == this.position ? this.rightPositionColor : this.wrongPositionColor;
        setBackground(backgroundColor);

        // Set label
        String text = label != 0 ? String.valueOf(label) : "";
        setText(text);

        // Disable the tile if it has become a hole
        setEnabled(label != 0);
    }

    /**
     * Visualize vetoed change of this button by making it blink.
     */
    private void displayError() {
        JButton button = this;

        Timer blinkTimer = new Timer(blinkDuration, new ActionListener() {
            private int blinkColorChangeCount = 0;
            private final Color originalColor = button.getBackground();

            @Override
            public void actionPerformed(ActionEvent e) {
                if (blinkColorChangeCount < blinkColorChangeTimes) {
                    button.setBackground(button.getBackground() == originalColor ? blinkColor : originalColor);
                    blinkColorChangeCount++;
                } else {
                    button.setBackground(originalColor);
                    ((Timer) e.getSource()).stop();
                }
            }
        });
        blinkTimer.start();
    }

    /**
     * Main action for the game. If the move is allowed,
     * the tile becomes the hole, otherwise it blinks.
     * 
     * @param evt Action event.
     */
    private void eightTileClicked(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_eightTileClicked
        try {
            this.vetos.fireVetoableChange(EVENT_TILECLICKED, new int[] { this.position, this.tileLabel }, null);
            // If move is allowed, this tile becomes the current hole
            this.setTileLabel(0);
        } catch (PropertyVetoException e) {
            this.displayError();
        }
    }

    /**
     * Property change listener for the game,
     * which is used to set the label of the tile.
     */
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        // Both the events will set the label, but it is passed differently
        if (evt.getPropertyName().equals(EightController.EVENT_SETLABEL)) {
            // Label is given directly in the event
            int[] tileProperties = (int[]) evt.getNewValue();
            int givenPosition = tileProperties[0];
            int givenTileLabel = tileProperties[1];

            if (givenPosition != this.position) {
                return;
            }

            this.setTileLabel(givenTileLabel);
        } else if (evt.getPropertyName().equals(EightController.EVENT_NEWGAME)) {
            // Label is given by position "this.position - 1" of a permutation of integers
            int[] permutationLabels = (int[]) evt.getNewValue();
            this.setTileLabel(permutationLabels[this.position - 1]);
        }
    }
}
